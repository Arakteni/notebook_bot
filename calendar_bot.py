import telebot
from telebot import types
import threading
from datetime import datetime
import pytz

bot = telebot.TeleBot('')

reminder = {}

def Send_Reminder(chat_id, message):
    bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")

@bot.message_handler(commands=['start'])
def Start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üóì–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    markup.add(btn1)
    bot.send_message(message.from_user.id, "üëã–ü—Ä–∏–≤–µ—Ç, –ø–æ—Å—Ç–∞–≤—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üóì–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
def Get_text_message(message):
    msg = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
    bot.register_next_step_handler(msg, Process_Reminder)

def Process_Reminder(message):
    text_reminder = message.text
    msg = bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì–ì–ì":')
    bot.register_next_step_handler(msg, lambda msg: Set_Reminder_Date(msg, text_reminder))

def Set_Reminder_Date(message, reminder_text):
    date_str = message.text
    chat_id = message.from_user.id

    try:
        date_reminder = datetime.strptime(date_str, "%d.%m.%Y")
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ß–ß:–ú–ú":')
        bot.register_next_step_handler(msg, lambda msg: Set_Reminder_Time(msg, reminder_text, date_reminder))

    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.")
        return

def Set_Reminder_Time(message, reminder_text, reminder_date):
    time_str = message.text
    chat_id = message.from_user.id

    try:
        hour, minute = map(int, time_str.split(':'))
        time_reminder = reminder_date.replace(hour=hour, minute=minute)
        msg = bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Europe/Moscow')
        bot.register_next_step_handler(msg, lambda msg: schedule_reminder(msg, chat_id, time_reminder, reminder_text))

    except ValueError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú.")
        return 

def schedule_reminder(message, chat_id, reminder_datetime, reminder_text):
    timezone_str = message.text.strip()
    
    try:
        tz = pytz.timezone(timezone_str)
        localized_reminder_datetime = tz.localize(reminder_datetime)
        now = datetime.now(tz)

        if localized_reminder_datetime < now:
            bot.send_message(chat_id, "–ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–ª–æ–µ –≤—Ä–µ–º—è.")
            return
        delay_seconds = (localized_reminder_datetime - now).total_seconds()
        threading.Timer(delay_seconds, Send_Reminder, args=(chat_id, reminder_text)).start()
        
        bot.send_message(chat_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {localized_reminder_datetime.strftime('%d.%m.%Y %H:%M')} –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ {timezone_str}.")

    except pytz.UnknownTimeZoneError:
        bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")

bot.polling(none_stop=True)
